// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./accessApplication";
export * from "./accessGroup";
export * from "./accessIdentityProvider";
export * from "./accessPolicy";
export * from "./accessRule";
export * from "./accessServiceToken";
export * from "./accountMember";
export * from "./apiToken";
export * from "./argo";
export * from "./authenticatedOriginPulls";
export * from "./authenticatedOriginPullsCertificate";
export * from "./byoIpPrefix";
export * from "./certificatePack";
export * from "./customHostname";
export * from "./customHostnameFallbackOrigin";
export * from "./customPages";
export * from "./customSsl";
export * from "./filter";
export * from "./firewallRule";
export * from "./getApiTokenPermissionGroups";
export * from "./getIpRanges";
export * from "./getWafGroups";
export * from "./getWafPackages";
export * from "./getWafRules";
export * from "./getZoneDnssec";
export * from "./getZones";
export * from "./healthcheck";
export * from "./ipList";
export * from "./loadBalancer";
export * from "./loadBalancerMonitor";
export * from "./loadBalancerPool";
export * from "./logPushOwnershipChallenge";
export * from "./logpullRetention";
export * from "./logpushJob";
export * from "./magicFirewallRuleset";
export * from "./originCaCertificate";
export * from "./pageRule";
export * from "./provider";
export * from "./rateLimit";
export * from "./record";
export * from "./spectrumApplication";
export * from "./wafGroup";
export * from "./wafOverride";
export * from "./wafPackage";
export * from "./wafRule";
export * from "./workerRoute";
export * from "./workerScript";
export * from "./workersKv";
export * from "./workersKvNamespace";
export * from "./zone";
export * from "./zoneDnssec";
export * from "./zoneLockdown";
export * from "./zoneSettingsOverride";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { AccessApplication } from "./accessApplication";
import { AccessGroup } from "./accessGroup";
import { AccessIdentityProvider } from "./accessIdentityProvider";
import { AccessPolicy } from "./accessPolicy";
import { AccessRule } from "./accessRule";
import { AccessServiceToken } from "./accessServiceToken";
import { AccountMember } from "./accountMember";
import { ApiToken } from "./apiToken";
import { Argo } from "./argo";
import { AuthenticatedOriginPulls } from "./authenticatedOriginPulls";
import { AuthenticatedOriginPullsCertificate } from "./authenticatedOriginPullsCertificate";
import { ByoIpPrefix } from "./byoIpPrefix";
import { CertificatePack } from "./certificatePack";
import { CustomHostname } from "./customHostname";
import { CustomHostnameFallbackOrigin } from "./customHostnameFallbackOrigin";
import { CustomPages } from "./customPages";
import { CustomSsl } from "./customSsl";
import { Filter } from "./filter";
import { FirewallRule } from "./firewallRule";
import { Healthcheck } from "./healthcheck";
import { IpList } from "./ipList";
import { LoadBalancer } from "./loadBalancer";
import { LoadBalancerMonitor } from "./loadBalancerMonitor";
import { LoadBalancerPool } from "./loadBalancerPool";
import { LogPushOwnershipChallenge } from "./logPushOwnershipChallenge";
import { LogpullRetention } from "./logpullRetention";
import { LogpushJob } from "./logpushJob";
import { MagicFirewallRuleset } from "./magicFirewallRuleset";
import { OriginCaCertificate } from "./originCaCertificate";
import { PageRule } from "./pageRule";
import { RateLimit } from "./rateLimit";
import { Record } from "./record";
import { SpectrumApplication } from "./spectrumApplication";
import { WafGroup } from "./wafGroup";
import { WafOverride } from "./wafOverride";
import { WafPackage } from "./wafPackage";
import { WafRule } from "./wafRule";
import { WorkerRoute } from "./workerRoute";
import { WorkerScript } from "./workerScript";
import { WorkersKv } from "./workersKv";
import { WorkersKvNamespace } from "./workersKvNamespace";
import { Zone } from "./zone";
import { ZoneDnssec } from "./zoneDnssec";
import { ZoneLockdown } from "./zoneLockdown";
import { ZoneSettingsOverride } from "./zoneSettingsOverride";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "cloudflare:index/accessApplication:AccessApplication":
                return new AccessApplication(name, <any>undefined, { urn })
            case "cloudflare:index/accessGroup:AccessGroup":
                return new AccessGroup(name, <any>undefined, { urn })
            case "cloudflare:index/accessIdentityProvider:AccessIdentityProvider":
                return new AccessIdentityProvider(name, <any>undefined, { urn })
            case "cloudflare:index/accessPolicy:AccessPolicy":
                return new AccessPolicy(name, <any>undefined, { urn })
            case "cloudflare:index/accessRule:AccessRule":
                return new AccessRule(name, <any>undefined, { urn })
            case "cloudflare:index/accessServiceToken:AccessServiceToken":
                return new AccessServiceToken(name, <any>undefined, { urn })
            case "cloudflare:index/accountMember:AccountMember":
                return new AccountMember(name, <any>undefined, { urn })
            case "cloudflare:index/apiToken:ApiToken":
                return new ApiToken(name, <any>undefined, { urn })
            case "cloudflare:index/argo:Argo":
                return new Argo(name, <any>undefined, { urn })
            case "cloudflare:index/authenticatedOriginPulls:AuthenticatedOriginPulls":
                return new AuthenticatedOriginPulls(name, <any>undefined, { urn })
            case "cloudflare:index/authenticatedOriginPullsCertificate:AuthenticatedOriginPullsCertificate":
                return new AuthenticatedOriginPullsCertificate(name, <any>undefined, { urn })
            case "cloudflare:index/byoIpPrefix:ByoIpPrefix":
                return new ByoIpPrefix(name, <any>undefined, { urn })
            case "cloudflare:index/certificatePack:CertificatePack":
                return new CertificatePack(name, <any>undefined, { urn })
            case "cloudflare:index/customHostname:CustomHostname":
                return new CustomHostname(name, <any>undefined, { urn })
            case "cloudflare:index/customHostnameFallbackOrigin:CustomHostnameFallbackOrigin":
                return new CustomHostnameFallbackOrigin(name, <any>undefined, { urn })
            case "cloudflare:index/customPages:CustomPages":
                return new CustomPages(name, <any>undefined, { urn })
            case "cloudflare:index/customSsl:CustomSsl":
                return new CustomSsl(name, <any>undefined, { urn })
            case "cloudflare:index/filter:Filter":
                return new Filter(name, <any>undefined, { urn })
            case "cloudflare:index/firewallRule:FirewallRule":
                return new FirewallRule(name, <any>undefined, { urn })
            case "cloudflare:index/healthcheck:Healthcheck":
                return new Healthcheck(name, <any>undefined, { urn })
            case "cloudflare:index/ipList:IpList":
                return new IpList(name, <any>undefined, { urn })
            case "cloudflare:index/loadBalancer:LoadBalancer":
                return new LoadBalancer(name, <any>undefined, { urn })
            case "cloudflare:index/loadBalancerMonitor:LoadBalancerMonitor":
                return new LoadBalancerMonitor(name, <any>undefined, { urn })
            case "cloudflare:index/loadBalancerPool:LoadBalancerPool":
                return new LoadBalancerPool(name, <any>undefined, { urn })
            case "cloudflare:index/logPushOwnershipChallenge:LogPushOwnershipChallenge":
                return new LogPushOwnershipChallenge(name, <any>undefined, { urn })
            case "cloudflare:index/logpullRetention:LogpullRetention":
                return new LogpullRetention(name, <any>undefined, { urn })
            case "cloudflare:index/logpushJob:LogpushJob":
                return new LogpushJob(name, <any>undefined, { urn })
            case "cloudflare:index/magicFirewallRuleset:MagicFirewallRuleset":
                return new MagicFirewallRuleset(name, <any>undefined, { urn })
            case "cloudflare:index/originCaCertificate:OriginCaCertificate":
                return new OriginCaCertificate(name, <any>undefined, { urn })
            case "cloudflare:index/pageRule:PageRule":
                return new PageRule(name, <any>undefined, { urn })
            case "cloudflare:index/rateLimit:RateLimit":
                return new RateLimit(name, <any>undefined, { urn })
            case "cloudflare:index/record:Record":
                return new Record(name, <any>undefined, { urn })
            case "cloudflare:index/spectrumApplication:SpectrumApplication":
                return new SpectrumApplication(name, <any>undefined, { urn })
            case "cloudflare:index/wafGroup:WafGroup":
                return new WafGroup(name, <any>undefined, { urn })
            case "cloudflare:index/wafOverride:WafOverride":
                return new WafOverride(name, <any>undefined, { urn })
            case "cloudflare:index/wafPackage:WafPackage":
                return new WafPackage(name, <any>undefined, { urn })
            case "cloudflare:index/wafRule:WafRule":
                return new WafRule(name, <any>undefined, { urn })
            case "cloudflare:index/workerRoute:WorkerRoute":
                return new WorkerRoute(name, <any>undefined, { urn })
            case "cloudflare:index/workerScript:WorkerScript":
                return new WorkerScript(name, <any>undefined, { urn })
            case "cloudflare:index/workersKv:WorkersKv":
                return new WorkersKv(name, <any>undefined, { urn })
            case "cloudflare:index/workersKvNamespace:WorkersKvNamespace":
                return new WorkersKvNamespace(name, <any>undefined, { urn })
            case "cloudflare:index/zone:Zone":
                return new Zone(name, <any>undefined, { urn })
            case "cloudflare:index/zoneDnssec:ZoneDnssec":
                return new ZoneDnssec(name, <any>undefined, { urn })
            case "cloudflare:index/zoneLockdown:ZoneLockdown":
                return new ZoneLockdown(name, <any>undefined, { urn })
            case "cloudflare:index/zoneSettingsOverride:ZoneSettingsOverride":
                return new ZoneSettingsOverride(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("cloudflare", "index/accessApplication", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/accessGroup", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/accessIdentityProvider", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/accessPolicy", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/accessRule", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/accessServiceToken", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/accountMember", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/apiToken", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/argo", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/authenticatedOriginPulls", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/authenticatedOriginPullsCertificate", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/byoIpPrefix", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/certificatePack", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/customHostname", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/customHostnameFallbackOrigin", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/customPages", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/customSsl", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/filter", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/firewallRule", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/healthcheck", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/ipList", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/loadBalancer", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/loadBalancerMonitor", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/loadBalancerPool", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/logPushOwnershipChallenge", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/logpullRetention", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/logpushJob", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/magicFirewallRuleset", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/originCaCertificate", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/pageRule", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/rateLimit", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/record", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/spectrumApplication", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/wafGroup", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/wafOverride", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/wafPackage", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/wafRule", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/workerRoute", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/workerScript", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/workersKv", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/workersKvNamespace", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/zone", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/zoneDnssec", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/zoneLockdown", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/zoneSettingsOverride", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("cloudflare", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:cloudflare") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
