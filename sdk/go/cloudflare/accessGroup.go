// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Cloudflare Access Group resource. Access Groups are used
// in conjunction with Access Policies to restrict access to a
// particular resource based on group membership.
// 
// ## Conditions
// 
// `require`, `exclude` and `include` arguments share the available
// conditions which can be applied. The conditions are:
// 
// * `ip` - (Optional) A list of IP addresses or ranges. Example:
//   `ip = ["1.2.3.4", "10.0.0.0/2"]`
// * `email` - (Optional) A list of email addresses. Example:
//   `email = ["test@example.com"]`
// * `emailDomain` - (Optional) A list of email domains. Example:
//   `emailDomain = ["example.com"]`
// * `everyone` - (Optional) Boolean indicating permitting access for all
//   requests. Example: `everyone = true`
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-cloudflare/blob/master/website/docs/r/access_group.html.markdown.
type AccessGroup struct {
	s *pulumi.ResourceState
}

// NewAccessGroup registers a new resource with the given unique name, arguments, and options.
func NewAccessGroup(ctx *pulumi.Context,
	name string, args *AccessGroupArgs, opts ...pulumi.ResourceOpt) (*AccessGroup, error) {
	if args == nil || args.AccountId == nil {
		return nil, errors.New("missing required argument 'AccountId'")
	}
	if args == nil || args.Includes == nil {
		return nil, errors.New("missing required argument 'Includes'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accountId"] = nil
		inputs["excludes"] = nil
		inputs["includes"] = nil
		inputs["name"] = nil
		inputs["requires"] = nil
	} else {
		inputs["accountId"] = args.AccountId
		inputs["excludes"] = args.Excludes
		inputs["includes"] = args.Includes
		inputs["name"] = args.Name
		inputs["requires"] = args.Requires
	}
	s, err := ctx.RegisterResource("cloudflare:index/accessGroup:AccessGroup", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AccessGroup{s: s}, nil
}

// GetAccessGroup gets an existing AccessGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessGroup(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AccessGroupState, opts ...pulumi.ResourceOpt) (*AccessGroup, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accountId"] = state.AccountId
		inputs["excludes"] = state.Excludes
		inputs["includes"] = state.Includes
		inputs["name"] = state.Name
		inputs["requires"] = state.Requires
	}
	s, err := ctx.ReadResource("cloudflare:index/accessGroup:AccessGroup", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AccessGroup{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AccessGroup) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AccessGroup) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The ID of the account the group is
// associated with.
func (r *AccessGroup) AccountId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["accountId"])
}

// A series of access conditions, see below for
// full list.
func (r *AccessGroup) Excludes() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["excludes"])
}

// A series of access conditions, see below for
// full list.
func (r *AccessGroup) Includes() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["includes"])
}

// Friendly name of the Access Group.
func (r *AccessGroup) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// A series of access conditions, see below for
// full list.
func (r *AccessGroup) Requires() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["requires"])
}

// Input properties used for looking up and filtering AccessGroup resources.
type AccessGroupState struct {
	// The ID of the account the group is
	// associated with.
	AccountId interface{}
	// A series of access conditions, see below for
	// full list.
	Excludes interface{}
	// A series of access conditions, see below for
	// full list.
	Includes interface{}
	// Friendly name of the Access Group.
	Name interface{}
	// A series of access conditions, see below for
	// full list.
	Requires interface{}
}

// The set of arguments for constructing a AccessGroup resource.
type AccessGroupArgs struct {
	// The ID of the account the group is
	// associated with.
	AccountId interface{}
	// A series of access conditions, see below for
	// full list.
	Excludes interface{}
	// A series of access conditions, see below for
	// full list.
	Includes interface{}
	// Friendly name of the Access Group.
	Name interface{}
	// A series of access conditions, see below for
	// full list.
	Requires interface{}
}
