// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Filter expressions that can be referenced across multiple features, e.g. Firewall Rule. The expression format is similar to [Wireshark Display Filter](https://www.wireshark.org/docs/man-pages/wireshark-filter.html).
type Filter struct {
	s *pulumi.ResourceState
}

// NewFilter registers a new resource with the given unique name, arguments, and options.
func NewFilter(ctx *pulumi.Context,
	name string, args *FilterArgs, opts ...pulumi.ResourceOpt) (*Filter, error) {
	if args == nil || args.Expression == nil {
		return nil, errors.New("missing required argument 'Expression'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["expression"] = nil
		inputs["paused"] = nil
		inputs["ref"] = nil
		inputs["zone"] = nil
		inputs["zoneId"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["expression"] = args.Expression
		inputs["paused"] = args.Paused
		inputs["ref"] = args.Ref
		inputs["zone"] = args.Zone
		inputs["zoneId"] = args.ZoneId
	}
	s, err := ctx.RegisterResource("cloudflare:index/filter:Filter", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Filter{s: s}, nil
}

// GetFilter gets an existing Filter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFilter(ctx *pulumi.Context,
	name string, id pulumi.ID, state *FilterState, opts ...pulumi.ResourceOpt) (*Filter, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["expression"] = state.Expression
		inputs["paused"] = state.Paused
		inputs["ref"] = state.Ref
		inputs["zone"] = state.Zone
		inputs["zoneId"] = state.ZoneId
	}
	s, err := ctx.ReadResource("cloudflare:index/filter:Filter", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Filter{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Filter) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Filter) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// A note that you can use to describe the purpose of the filter.
func (r *Filter) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The filter expression to be used.
func (r *Filter) Expression() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["expression"])
}

// Whether this filter is currently paused. Boolean value.
func (r *Filter) Paused() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["paused"])
}

// Short reference tag to quickly select related rules.
func (r *Filter) Ref() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ref"])
}

// The DNS zone to which the Filter should be added. Will be resolved to `zone_id` upon creation.
func (r *Filter) Zone() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["zone"])
}

// The DNS zone to which the Filter should be added.
func (r *Filter) ZoneId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["zoneId"])
}

// Input properties used for looking up and filtering Filter resources.
type FilterState struct {
	// A note that you can use to describe the purpose of the filter.
	Description interface{}
	// The filter expression to be used.
	Expression interface{}
	// Whether this filter is currently paused. Boolean value.
	Paused interface{}
	// Short reference tag to quickly select related rules.
	Ref interface{}
	// The DNS zone to which the Filter should be added. Will be resolved to `zone_id` upon creation.
	Zone interface{}
	// The DNS zone to which the Filter should be added.
	ZoneId interface{}
}

// The set of arguments for constructing a Filter resource.
type FilterArgs struct {
	// A note that you can use to describe the purpose of the filter.
	Description interface{}
	// The filter expression to be used.
	Expression interface{}
	// Whether this filter is currently paused. Boolean value.
	Paused interface{}
	// Short reference tag to quickly select related rules.
	Ref interface{}
	// The DNS zone to which the Filter should be added. Will be resolved to `zone_id` upon creation.
	Zone interface{}
	// The DNS zone to which the Filter should be added.
	ZoneId interface{}
}
