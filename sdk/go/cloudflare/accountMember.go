// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource which manages Cloudflare account members.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-cloudflare/blob/master/website/docs/r/account_member.html.markdown.
type AccountMember struct {
	s *pulumi.ResourceState
}

// NewAccountMember registers a new resource with the given unique name, arguments, and options.
func NewAccountMember(ctx *pulumi.Context,
	name string, args *AccountMemberArgs, opts ...pulumi.ResourceOpt) (*AccountMember, error) {
	if args == nil || args.EmailAddress == nil {
		return nil, errors.New("missing required argument 'EmailAddress'")
	}
	if args == nil || args.RoleIds == nil {
		return nil, errors.New("missing required argument 'RoleIds'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["emailAddress"] = nil
		inputs["roleIds"] = nil
	} else {
		inputs["emailAddress"] = args.EmailAddress
		inputs["roleIds"] = args.RoleIds
	}
	s, err := ctx.RegisterResource("cloudflare:index/accountMember:AccountMember", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AccountMember{s: s}, nil
}

// GetAccountMember gets an existing AccountMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccountMember(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AccountMemberState, opts ...pulumi.ResourceOpt) (*AccountMember, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["emailAddress"] = state.EmailAddress
		inputs["roleIds"] = state.RoleIds
	}
	s, err := ctx.ReadResource("cloudflare:index/accountMember:AccountMember", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AccountMember{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AccountMember) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AccountMember) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The email address of the user who you wish to manage. Note: Following creation, this field becomes read only via the API and cannot be updated.
func (r *AccountMember) EmailAddress() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["emailAddress"])
}

// Array of account role IDs that you want to assign to a member.
func (r *AccountMember) RoleIds() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["roleIds"])
}

// Input properties used for looking up and filtering AccountMember resources.
type AccountMemberState struct {
	// The email address of the user who you wish to manage. Note: Following creation, this field becomes read only via the API and cannot be updated.
	EmailAddress interface{}
	// Array of account role IDs that you want to assign to a member.
	RoleIds interface{}
}

// The set of arguments for constructing a AccountMember resource.
type AccountMemberArgs struct {
	// The email address of the user who you wish to manage. Note: Following creation, this field becomes read only via the API and cannot be updated.
	EmailAddress interface{}
	// Array of account role IDs that you want to assign to a member.
	RoleIds interface{}
}
