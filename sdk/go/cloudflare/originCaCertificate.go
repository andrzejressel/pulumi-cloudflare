// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Cloudflare Origin CA certificate used to protect traffic to your origin without involving a third party Certificate Authority.
// 
// **This resource requires you use your Origin CA Key as the `apiUserServiceKey`.**
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-cloudflare/blob/master/website/docs/r/origin_ca_certificate.html.markdown.
type OriginCaCertificate struct {
	s *pulumi.ResourceState
}

// NewOriginCaCertificate registers a new resource with the given unique name, arguments, and options.
func NewOriginCaCertificate(ctx *pulumi.Context,
	name string, args *OriginCaCertificateArgs, opts ...pulumi.ResourceOpt) (*OriginCaCertificate, error) {
	if args == nil || args.Csr == nil {
		return nil, errors.New("missing required argument 'Csr'")
	}
	if args == nil || args.Hostnames == nil {
		return nil, errors.New("missing required argument 'Hostnames'")
	}
	if args == nil || args.RequestType == nil {
		return nil, errors.New("missing required argument 'RequestType'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["csr"] = nil
		inputs["hostnames"] = nil
		inputs["requestType"] = nil
		inputs["requestedValidity"] = nil
	} else {
		inputs["csr"] = args.Csr
		inputs["hostnames"] = args.Hostnames
		inputs["requestType"] = args.RequestType
		inputs["requestedValidity"] = args.RequestedValidity
	}
	inputs["certificate"] = nil
	inputs["expiresOn"] = nil
	s, err := ctx.RegisterResource("cloudflare:index/originCaCertificate:OriginCaCertificate", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &OriginCaCertificate{s: s}, nil
}

// GetOriginCaCertificate gets an existing OriginCaCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOriginCaCertificate(ctx *pulumi.Context,
	name string, id pulumi.ID, state *OriginCaCertificateState, opts ...pulumi.ResourceOpt) (*OriginCaCertificate, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["certificate"] = state.Certificate
		inputs["csr"] = state.Csr
		inputs["expiresOn"] = state.ExpiresOn
		inputs["hostnames"] = state.Hostnames
		inputs["requestType"] = state.RequestType
		inputs["requestedValidity"] = state.RequestedValidity
	}
	s, err := ctx.ReadResource("cloudflare:index/originCaCertificate:OriginCaCertificate", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &OriginCaCertificate{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *OriginCaCertificate) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *OriginCaCertificate) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The Origin CA certificate
func (r *OriginCaCertificate) Certificate() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["certificate"])
}

// The Certificate Signing Request. Must be newline-encoded.
func (r *OriginCaCertificate) Csr() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["csr"])
}

// The datetime when the certificate will expire.
func (r *OriginCaCertificate) ExpiresOn() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["expiresOn"])
}

// An array of hostnames or wildcard names bound to the certificate.
func (r *OriginCaCertificate) Hostnames() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["hostnames"])
}

// The signature type desired on the certificate.
func (r *OriginCaCertificate) RequestType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["requestType"])
}

// The number of days for which the certificate should be valid.
func (r *OriginCaCertificate) RequestedValidity() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["requestedValidity"])
}

// Input properties used for looking up and filtering OriginCaCertificate resources.
type OriginCaCertificateState struct {
	// The Origin CA certificate
	Certificate interface{}
	// The Certificate Signing Request. Must be newline-encoded.
	Csr interface{}
	// The datetime when the certificate will expire.
	ExpiresOn interface{}
	// An array of hostnames or wildcard names bound to the certificate.
	Hostnames interface{}
	// The signature type desired on the certificate.
	RequestType interface{}
	// The number of days for which the certificate should be valid.
	RequestedValidity interface{}
}

// The set of arguments for constructing a OriginCaCertificate resource.
type OriginCaCertificateArgs struct {
	// The Certificate Signing Request. Must be newline-encoded.
	Csr interface{}
	// An array of hostnames or wildcard names bound to the certificate.
	Hostnames interface{}
	// The signature type desired on the certificate.
	RequestType interface{}
	// The number of days for which the certificate should be valid.
	RequestedValidity interface{}
}
