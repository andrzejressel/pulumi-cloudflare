// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Cloudflare WAF rule package resource for a particular zone. This can be used to configure firewall behaviour for pre-defined firewall packages.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-cloudflare/blob/master/website/docs/r/waf_package.html.markdown.
type WafPackage struct {
	s *pulumi.ResourceState
}

// NewWafPackage registers a new resource with the given unique name, arguments, and options.
func NewWafPackage(ctx *pulumi.Context,
	name string, args *WafPackageArgs, opts ...pulumi.ResourceOpt) (*WafPackage, error) {
	if args == nil || args.PackageId == nil {
		return nil, errors.New("missing required argument 'PackageId'")
	}
	if args == nil || args.ZoneId == nil {
		return nil, errors.New("missing required argument 'ZoneId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["actionMode"] = nil
		inputs["packageId"] = nil
		inputs["sensitivity"] = nil
		inputs["zoneId"] = nil
	} else {
		inputs["actionMode"] = args.ActionMode
		inputs["packageId"] = args.PackageId
		inputs["sensitivity"] = args.Sensitivity
		inputs["zoneId"] = args.ZoneId
	}
	s, err := ctx.RegisterResource("cloudflare:index/wafPackage:WafPackage", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &WafPackage{s: s}, nil
}

// GetWafPackage gets an existing WafPackage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWafPackage(ctx *pulumi.Context,
	name string, id pulumi.ID, state *WafPackageState, opts ...pulumi.ResourceOpt) (*WafPackage, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["actionMode"] = state.ActionMode
		inputs["packageId"] = state.PackageId
		inputs["sensitivity"] = state.Sensitivity
		inputs["zoneId"] = state.ZoneId
	}
	s, err := ctx.ReadResource("cloudflare:index/wafPackage:WafPackage", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &WafPackage{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *WafPackage) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *WafPackage) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The action mode of the package, can be one of ["block", "challenge", "simulate"].
func (r *WafPackage) ActionMode() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["actionMode"])
}

// The WAF Package ID.
func (r *WafPackage) PackageId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["packageId"])
}

// The sensitivity of the package, can be one of ["high", "medium", "low", "off"].
func (r *WafPackage) Sensitivity() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sensitivity"])
}

// The DNS zone ID to apply to.
func (r *WafPackage) ZoneId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["zoneId"])
}

// Input properties used for looking up and filtering WafPackage resources.
type WafPackageState struct {
	// The action mode of the package, can be one of ["block", "challenge", "simulate"].
	ActionMode interface{}
	// The WAF Package ID.
	PackageId interface{}
	// The sensitivity of the package, can be one of ["high", "medium", "low", "off"].
	Sensitivity interface{}
	// The DNS zone ID to apply to.
	ZoneId interface{}
}

// The set of arguments for constructing a WafPackage resource.
type WafPackageArgs struct {
	// The action mode of the package, can be one of ["block", "challenge", "simulate"].
	ActionMode interface{}
	// The WAF Package ID.
	PackageId interface{}
	// The sensitivity of the package, can be one of ["high", "medium", "low", "off"].
	Sensitivity interface{}
	// The DNS zone ID to apply to.
	ZoneId interface{}
}
