// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "cloudflare:index/accessApplication:AccessApplication":
		r, err = NewAccessApplication(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/accessGroup:AccessGroup":
		r, err = NewAccessGroup(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/accessIdentityProvider:AccessIdentityProvider":
		r, err = NewAccessIdentityProvider(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/accessPolicy:AccessPolicy":
		r, err = NewAccessPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/accessRule:AccessRule":
		r, err = NewAccessRule(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/accessServiceToken:AccessServiceToken":
		r, err = NewAccessServiceToken(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/accountMember:AccountMember":
		r, err = NewAccountMember(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/apiToken:ApiToken":
		r, err = NewApiToken(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/argo:Argo":
		r, err = NewArgo(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/authenticatedOriginPulls:AuthenticatedOriginPulls":
		r, err = NewAuthenticatedOriginPulls(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/authenticatedOriginPullsCertificate:AuthenticatedOriginPullsCertificate":
		r, err = NewAuthenticatedOriginPullsCertificate(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/byoIpPrefix:ByoIpPrefix":
		r, err = NewByoIpPrefix(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/certificatePack:CertificatePack":
		r, err = NewCertificatePack(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/customHostname:CustomHostname":
		r, err = NewCustomHostname(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/customHostnameFallbackOrigin:CustomHostnameFallbackOrigin":
		r, err = NewCustomHostnameFallbackOrigin(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/customPages:CustomPages":
		r, err = NewCustomPages(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/customSsl:CustomSsl":
		r, err = NewCustomSsl(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/filter:Filter":
		r, err = NewFilter(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/firewallRule:FirewallRule":
		r, err = NewFirewallRule(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/healthcheck:Healthcheck":
		r, err = NewHealthcheck(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/ipList:IpList":
		r, err = NewIpList(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/loadBalancer:LoadBalancer":
		r, err = NewLoadBalancer(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/loadBalancerMonitor:LoadBalancerMonitor":
		r, err = NewLoadBalancerMonitor(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/loadBalancerPool:LoadBalancerPool":
		r, err = NewLoadBalancerPool(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/logPushOwnershipChallenge:LogPushOwnershipChallenge":
		r, err = NewLogPushOwnershipChallenge(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/logpullRetention:LogpullRetention":
		r, err = NewLogpullRetention(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/logpushJob:LogpushJob":
		r, err = NewLogpushJob(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/magicFirewallRuleset:MagicFirewallRuleset":
		r, err = NewMagicFirewallRuleset(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/originCaCertificate:OriginCaCertificate":
		r, err = NewOriginCaCertificate(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/pageRule:PageRule":
		r, err = NewPageRule(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/rateLimit:RateLimit":
		r, err = NewRateLimit(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/record:Record":
		r, err = NewRecord(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/spectrumApplication:SpectrumApplication":
		r, err = NewSpectrumApplication(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/wafGroup:WafGroup":
		r, err = NewWafGroup(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/wafOverride:WafOverride":
		r, err = NewWafOverride(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/wafPackage:WafPackage":
		r, err = NewWafPackage(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/wafRule:WafRule":
		r, err = NewWafRule(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/workerRoute:WorkerRoute":
		r, err = NewWorkerRoute(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/workerScript:WorkerScript":
		r, err = NewWorkerScript(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/workersKv:WorkersKv":
		r, err = NewWorkersKv(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/workersKvNamespace:WorkersKvNamespace":
		r, err = NewWorkersKvNamespace(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/zone:Zone":
		r, err = NewZone(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/zoneDnssec:ZoneDnssec":
		r, err = NewZoneDnssec(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/zoneLockdown:ZoneLockdown":
		r, err = NewZoneLockdown(ctx, name, nil, pulumi.URN_(urn))
	case "cloudflare:index/zoneSettingsOverride:ZoneSettingsOverride":
		r, err = NewZoneSettingsOverride(ctx, name, nil, pulumi.URN_(urn))
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:cloudflare" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	return NewProvider(ctx, name, nil, pulumi.URN_(urn))
}

func init() {
	version, err := PkgVersion()
	if err != nil {
		fmt.Println("failed to determine package version. defaulting to v1: %v", err)
	}
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/accessApplication",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/accessGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/accessIdentityProvider",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/accessPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/accessRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/accessServiceToken",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/accountMember",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/apiToken",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/argo",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/authenticatedOriginPulls",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/authenticatedOriginPullsCertificate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/byoIpPrefix",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/certificatePack",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/customHostname",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/customHostnameFallbackOrigin",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/customPages",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/customSsl",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/filter",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/firewallRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/healthcheck",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/ipList",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/loadBalancer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/loadBalancerMonitor",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/loadBalancerPool",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/logPushOwnershipChallenge",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/logpullRetention",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/logpushJob",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/magicFirewallRuleset",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/originCaCertificate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/pageRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/rateLimit",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/record",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/spectrumApplication",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/wafGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/wafOverride",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/wafPackage",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/wafRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/workerRoute",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/workerScript",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/workersKv",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/workersKvNamespace",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/zone",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/zoneDnssec",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/zoneLockdown",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cloudflare",
		"index/zoneSettingsOverride",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"cloudflare",
		&pkg{version},
	)
}
