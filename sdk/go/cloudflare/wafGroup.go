// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Cloudflare WAF rule group resource for a particular zone. This can be used to configure firewall behaviour for pre-defined firewall groups.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-cloudflare/blob/master/website/docs/r/waf_group.html.markdown.
type WafGroup struct {
	s *pulumi.ResourceState
}

// NewWafGroup registers a new resource with the given unique name, arguments, and options.
func NewWafGroup(ctx *pulumi.Context,
	name string, args *WafGroupArgs, opts ...pulumi.ResourceOpt) (*WafGroup, error) {
	if args == nil || args.GroupId == nil {
		return nil, errors.New("missing required argument 'GroupId'")
	}
	if args == nil || args.ZoneId == nil {
		return nil, errors.New("missing required argument 'ZoneId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["groupId"] = nil
		inputs["mode"] = nil
		inputs["packageId"] = nil
		inputs["zoneId"] = nil
	} else {
		inputs["groupId"] = args.GroupId
		inputs["mode"] = args.Mode
		inputs["packageId"] = args.PackageId
		inputs["zoneId"] = args.ZoneId
	}
	s, err := ctx.RegisterResource("cloudflare:index/wafGroup:WafGroup", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &WafGroup{s: s}, nil
}

// GetWafGroup gets an existing WafGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWafGroup(ctx *pulumi.Context,
	name string, id pulumi.ID, state *WafGroupState, opts ...pulumi.ResourceOpt) (*WafGroup, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["groupId"] = state.GroupId
		inputs["mode"] = state.Mode
		inputs["packageId"] = state.PackageId
		inputs["zoneId"] = state.ZoneId
	}
	s, err := ctx.ReadResource("cloudflare:index/wafGroup:WafGroup", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &WafGroup{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *WafGroup) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *WafGroup) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The WAF Rule Group ID.
func (r *WafGroup) GroupId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["groupId"])
}

// The mode of the group, can be one of ["on", "off"].
func (r *WafGroup) Mode() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["mode"])
}

// The ID of the WAF Rule Package that contains the group.
func (r *WafGroup) PackageId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["packageId"])
}

// The DNS zone ID to apply to.
func (r *WafGroup) ZoneId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["zoneId"])
}

// Input properties used for looking up and filtering WafGroup resources.
type WafGroupState struct {
	// The WAF Rule Group ID.
	GroupId interface{}
	// The mode of the group, can be one of ["on", "off"].
	Mode interface{}
	// The ID of the WAF Rule Package that contains the group.
	PackageId interface{}
	// The DNS zone ID to apply to.
	ZoneId interface{}
}

// The set of arguments for constructing a WafGroup resource.
type WafGroupArgs struct {
	// The WAF Rule Group ID.
	GroupId interface{}
	// The mode of the group, can be one of ["on", "off"].
	Mode interface{}
	// The ID of the WAF Rule Package that contains the group.
	PackageId interface{}
	// The DNS zone ID to apply to.
	ZoneId interface{}
}
