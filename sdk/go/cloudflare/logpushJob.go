// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource which manages Cloudflare logpush jobs.
type LogpushJob struct {
	s *pulumi.ResourceState
}

// NewLogpushJob registers a new resource with the given unique name, arguments, and options.
func NewLogpushJob(ctx *pulumi.Context,
	name string, args *LogpushJobArgs, opts ...pulumi.ResourceOpt) (*LogpushJob, error) {
	if args == nil || args.DestinationConf == nil {
		return nil, errors.New("missing required argument 'DestinationConf'")
	}
	if args == nil || args.OwnershipChallenge == nil {
		return nil, errors.New("missing required argument 'OwnershipChallenge'")
	}
	if args == nil || args.ZoneId == nil {
		return nil, errors.New("missing required argument 'ZoneId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["destinationConf"] = nil
		inputs["enabled"] = nil
		inputs["logpullOptions"] = nil
		inputs["name"] = nil
		inputs["ownershipChallenge"] = nil
		inputs["zoneId"] = nil
	} else {
		inputs["destinationConf"] = args.DestinationConf
		inputs["enabled"] = args.Enabled
		inputs["logpullOptions"] = args.LogpullOptions
		inputs["name"] = args.Name
		inputs["ownershipChallenge"] = args.OwnershipChallenge
		inputs["zoneId"] = args.ZoneId
	}
	s, err := ctx.RegisterResource("cloudflare:index/logpushJob:LogpushJob", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &LogpushJob{s: s}, nil
}

// GetLogpushJob gets an existing LogpushJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogpushJob(ctx *pulumi.Context,
	name string, id pulumi.ID, state *LogpushJobState, opts ...pulumi.ResourceOpt) (*LogpushJob, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["destinationConf"] = state.DestinationConf
		inputs["enabled"] = state.Enabled
		inputs["logpullOptions"] = state.LogpullOptions
		inputs["name"] = state.Name
		inputs["ownershipChallenge"] = state.OwnershipChallenge
		inputs["zoneId"] = state.ZoneId
	}
	s, err := ctx.ReadResource("cloudflare:index/logpushJob:LogpushJob", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &LogpushJob{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *LogpushJob) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *LogpushJob) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *LogpushJob) DestinationConf() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["destinationConf"])
}

func (r *LogpushJob) Enabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enabled"])
}

func (r *LogpushJob) LogpullOptions() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["logpullOptions"])
}

func (r *LogpushJob) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Ownership challenge token to prove destination ownership. See [https://developers.cloudflare.com/logs/tutorials/tutorial-logpush-curl/](https://developers.cloudflare.com/logs/tutorials/tutorial-logpush-curl/)
func (r *LogpushJob) OwnershipChallenge() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ownershipChallenge"])
}

func (r *LogpushJob) ZoneId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["zoneId"])
}

// Input properties used for looking up and filtering LogpushJob resources.
type LogpushJobState struct {
	DestinationConf interface{}
	Enabled interface{}
	LogpullOptions interface{}
	Name interface{}
	// Ownership challenge token to prove destination ownership. See [https://developers.cloudflare.com/logs/tutorials/tutorial-logpush-curl/](https://developers.cloudflare.com/logs/tutorials/tutorial-logpush-curl/)
	OwnershipChallenge interface{}
	ZoneId interface{}
}

// The set of arguments for constructing a LogpushJob resource.
type LogpushJobArgs struct {
	DestinationConf interface{}
	Enabled interface{}
	LogpullOptions interface{}
	Name interface{}
	// Ownership challenge token to prove destination ownership. See [https://developers.cloudflare.com/logs/tutorials/tutorial-logpush-curl/](https://developers.cloudflare.com/logs/tutorials/tutorial-logpush-curl/)
	OwnershipChallenge interface{}
	ZoneId interface{}
}
