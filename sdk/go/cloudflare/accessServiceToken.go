// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Access Service Tokens are used for service-to-service communication
// when an application is behind Cloudflare Access.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-cloudflare/blob/master/website/docs/r/access_service_token.html.markdown.
type AccessServiceToken struct {
	s *pulumi.ResourceState
}

// NewAccessServiceToken registers a new resource with the given unique name, arguments, and options.
func NewAccessServiceToken(ctx *pulumi.Context,
	name string, args *AccessServiceTokenArgs, opts ...pulumi.ResourceOpt) (*AccessServiceToken, error) {
	if args == nil || args.AccountId == nil {
		return nil, errors.New("missing required argument 'AccountId'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accountId"] = nil
		inputs["name"] = nil
	} else {
		inputs["accountId"] = args.AccountId
		inputs["name"] = args.Name
	}
	inputs["clientId"] = nil
	inputs["clientSecret"] = nil
	s, err := ctx.RegisterResource("cloudflare:index/accessServiceToken:AccessServiceToken", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AccessServiceToken{s: s}, nil
}

// GetAccessServiceToken gets an existing AccessServiceToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessServiceToken(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AccessServiceTokenState, opts ...pulumi.ResourceOpt) (*AccessServiceToken, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accountId"] = state.AccountId
		inputs["clientId"] = state.ClientId
		inputs["clientSecret"] = state.ClientSecret
		inputs["name"] = state.Name
	}
	s, err := ctx.ReadResource("cloudflare:index/accessServiceToken:AccessServiceToken", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AccessServiceToken{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AccessServiceToken) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AccessServiceToken) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The ID of the account where the Access
// Service is being created.
func (r *AccessServiceToken) AccountId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["accountId"])
}

// UUID client ID associated with the Service Token.
func (r *AccessServiceToken) ClientId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clientId"])
}

// A secret for interacting with Access protocols.
func (r *AccessServiceToken) ClientSecret() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clientSecret"])
}

// Friendly name of the token's intent.
func (r *AccessServiceToken) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Input properties used for looking up and filtering AccessServiceToken resources.
type AccessServiceTokenState struct {
	// The ID of the account where the Access
	// Service is being created.
	AccountId interface{}
	// UUID client ID associated with the Service Token.
	ClientId interface{}
	// A secret for interacting with Access protocols.
	ClientSecret interface{}
	// Friendly name of the token's intent.
	Name interface{}
}

// The set of arguments for constructing a AccessServiceToken resource.
type AccessServiceTokenArgs struct {
	// The ID of the account where the Access
	// Service is being created.
	AccountId interface{}
	// Friendly name of the token's intent.
	Name interface{}
}
