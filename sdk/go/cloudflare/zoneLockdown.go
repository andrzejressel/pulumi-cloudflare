// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Cloudflare Zone Lockdown resource. Zone Lockdown allows you to define one or more URLs (with wildcard matching on the domain or path) that will only permit access if the request originates from an IP address that matches a safelist of one or more IP addresses and/or IP ranges.
type ZoneLockdown struct {
	s *pulumi.ResourceState
}

// NewZoneLockdown registers a new resource with the given unique name, arguments, and options.
func NewZoneLockdown(ctx *pulumi.Context,
	name string, args *ZoneLockdownArgs, opts ...pulumi.ResourceOpt) (*ZoneLockdown, error) {
	if args == nil || args.Configurations == nil {
		return nil, errors.New("missing required argument 'Configurations'")
	}
	if args == nil || args.Urls == nil {
		return nil, errors.New("missing required argument 'Urls'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["configurations"] = nil
		inputs["description"] = nil
		inputs["paused"] = nil
		inputs["urls"] = nil
		inputs["zone"] = nil
		inputs["zoneId"] = nil
	} else {
		inputs["configurations"] = args.Configurations
		inputs["description"] = args.Description
		inputs["paused"] = args.Paused
		inputs["urls"] = args.Urls
		inputs["zone"] = args.Zone
		inputs["zoneId"] = args.ZoneId
	}
	s, err := ctx.RegisterResource("cloudflare:index/zoneLockdown:ZoneLockdown", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ZoneLockdown{s: s}, nil
}

// GetZoneLockdown gets an existing ZoneLockdown resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZoneLockdown(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ZoneLockdownState, opts ...pulumi.ResourceOpt) (*ZoneLockdown, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["configurations"] = state.Configurations
		inputs["description"] = state.Description
		inputs["paused"] = state.Paused
		inputs["urls"] = state.Urls
		inputs["zone"] = state.Zone
		inputs["zoneId"] = state.ZoneId
	}
	s, err := ctx.ReadResource("cloudflare:index/zoneLockdown:ZoneLockdown", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ZoneLockdown{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ZoneLockdown) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ZoneLockdown) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// A list of IP addresses or IP ranges to match the request against specified in target, value pairs.  It's a complex value. See description below.   The order of the configuration entries is unimportant.
func (r *ZoneLockdown) Configurations() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["configurations"])
}

// A description about the lockdown entry. Typically used as a reminder or explanation for the lockdown.
func (r *ZoneLockdown) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// Boolean of whether this zone lockdown is currently paused. Default: false.
func (r *ZoneLockdown) Paused() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["paused"])
}

// A list of simple wildcard patterns to match requests against. The order of the urls is unimportant.
func (r *ZoneLockdown) Urls() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["urls"])
}

// The DNS zone to which the lockdown will be added. Will be resolved to `zone_id` upon creation.
func (r *ZoneLockdown) Zone() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["zone"])
}

// The DNS zone to which the access rule should be added.
func (r *ZoneLockdown) ZoneId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["zoneId"])
}

// Input properties used for looking up and filtering ZoneLockdown resources.
type ZoneLockdownState struct {
	// A list of IP addresses or IP ranges to match the request against specified in target, value pairs.  It's a complex value. See description below.   The order of the configuration entries is unimportant.
	Configurations interface{}
	// A description about the lockdown entry. Typically used as a reminder or explanation for the lockdown.
	Description interface{}
	// Boolean of whether this zone lockdown is currently paused. Default: false.
	Paused interface{}
	// A list of simple wildcard patterns to match requests against. The order of the urls is unimportant.
	Urls interface{}
	// The DNS zone to which the lockdown will be added. Will be resolved to `zone_id` upon creation.
	Zone interface{}
	// The DNS zone to which the access rule should be added.
	ZoneId interface{}
}

// The set of arguments for constructing a ZoneLockdown resource.
type ZoneLockdownArgs struct {
	// A list of IP addresses or IP ranges to match the request against specified in target, value pairs.  It's a complex value. See description below.   The order of the configuration entries is unimportant.
	Configurations interface{}
	// A description about the lockdown entry. Typically used as a reminder or explanation for the lockdown.
	Description interface{}
	// Boolean of whether this zone lockdown is currently paused. Default: false.
	Paused interface{}
	// A list of simple wildcard patterns to match requests against. The order of the urls is unimportant.
	Urls interface{}
	// The DNS zone to which the lockdown will be added. Will be resolved to `zone_id` upon creation.
	Zone interface{}
	// The DNS zone to which the access rule should be added.
	ZoneId interface{}
}
