// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Define Firewall rules using filter expressions for more control over how traffic is matched to the rule.
// A filter expression permits selecting traffic by multiple criteria allowing greater freedom in rule creation.
// 
// Filter expressions needs to be created first before using Firewall Rule. See Filter.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-cloudflare/blob/master/website/docs/r/firewall_rule.html.markdown.
type FirewallRule struct {
	s *pulumi.ResourceState
}

// NewFirewallRule registers a new resource with the given unique name, arguments, and options.
func NewFirewallRule(ctx *pulumi.Context,
	name string, args *FirewallRuleArgs, opts ...pulumi.ResourceOpt) (*FirewallRule, error) {
	if args == nil || args.Action == nil {
		return nil, errors.New("missing required argument 'Action'")
	}
	if args == nil || args.FilterId == nil {
		return nil, errors.New("missing required argument 'FilterId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["action"] = nil
		inputs["description"] = nil
		inputs["filterId"] = nil
		inputs["paused"] = nil
		inputs["priority"] = nil
		inputs["zone"] = nil
		inputs["zoneId"] = nil
	} else {
		inputs["action"] = args.Action
		inputs["description"] = args.Description
		inputs["filterId"] = args.FilterId
		inputs["paused"] = args.Paused
		inputs["priority"] = args.Priority
		inputs["zone"] = args.Zone
		inputs["zoneId"] = args.ZoneId
	}
	s, err := ctx.RegisterResource("cloudflare:index/firewallRule:FirewallRule", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &FirewallRule{s: s}, nil
}

// GetFirewallRule gets an existing FirewallRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallRule(ctx *pulumi.Context,
	name string, id pulumi.ID, state *FirewallRuleState, opts ...pulumi.ResourceOpt) (*FirewallRule, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["action"] = state.Action
		inputs["description"] = state.Description
		inputs["filterId"] = state.FilterId
		inputs["paused"] = state.Paused
		inputs["priority"] = state.Priority
		inputs["zone"] = state.Zone
		inputs["zoneId"] = state.ZoneId
	}
	s, err := ctx.ReadResource("cloudflare:index/firewallRule:FirewallRule", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &FirewallRule{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *FirewallRule) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *FirewallRule) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The action to apply to a matched request. Allowed values: "block", "challenge", "allow", "js_challenge". Enterprise plan also allows "log".
func (r *FirewallRule) Action() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["action"])
}

// A description of the rule to help identify it.
func (r *FirewallRule) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

func (r *FirewallRule) FilterId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["filterId"])
}

// Whether this filter based firewall rule is currently paused. Boolean value.
func (r *FirewallRule) Paused() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["paused"])
}

// The priority of the rule to allow control of processing order. A lower number indicates high priority. If not provided, any rules with a priority will be sequenced before those without.
func (r *FirewallRule) Priority() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["priority"])
}

// The DNS zone to which the Firewall Rule should be added. Will be resolved to `zone_id` upon creation.
func (r *FirewallRule) Zone() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["zone"])
}

// The DNS zone to which the Filter should be added.
func (r *FirewallRule) ZoneId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["zoneId"])
}

// Input properties used for looking up and filtering FirewallRule resources.
type FirewallRuleState struct {
	// The action to apply to a matched request. Allowed values: "block", "challenge", "allow", "js_challenge". Enterprise plan also allows "log".
	Action interface{}
	// A description of the rule to help identify it.
	Description interface{}
	FilterId interface{}
	// Whether this filter based firewall rule is currently paused. Boolean value.
	Paused interface{}
	// The priority of the rule to allow control of processing order. A lower number indicates high priority. If not provided, any rules with a priority will be sequenced before those without.
	Priority interface{}
	// The DNS zone to which the Firewall Rule should be added. Will be resolved to `zone_id` upon creation.
	Zone interface{}
	// The DNS zone to which the Filter should be added.
	ZoneId interface{}
}

// The set of arguments for constructing a FirewallRule resource.
type FirewallRuleArgs struct {
	// The action to apply to a matched request. Allowed values: "block", "challenge", "allow", "js_challenge". Enterprise plan also allows "log".
	Action interface{}
	// A description of the rule to help identify it.
	Description interface{}
	FilterId interface{}
	// Whether this filter based firewall rule is currently paused. Boolean value.
	Paused interface{}
	// The priority of the rule to allow control of processing order. A lower number indicates high priority. If not provided, any rules with a priority will be sequenced before those without.
	Priority interface{}
	// The DNS zone to which the Firewall Rule should be added. Will be resolved to `zone_id` upon creation.
	Zone interface{}
	// The DNS zone to which the Filter should be added.
	ZoneId interface{}
}
