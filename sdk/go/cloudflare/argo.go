// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Cloudflare Argo controls the routing to your origin and tiered caching options to speed up your website browsing experience.
type Argo struct {
	s *pulumi.ResourceState
}

// NewArgo registers a new resource with the given unique name, arguments, and options.
func NewArgo(ctx *pulumi.Context,
	name string, args *ArgoArgs, opts ...pulumi.ResourceOpt) (*Argo, error) {
	if args == nil || args.ZoneId == nil {
		return nil, errors.New("missing required argument 'ZoneId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["smartRouting"] = nil
		inputs["tieredCaching"] = nil
		inputs["zoneId"] = nil
	} else {
		inputs["smartRouting"] = args.SmartRouting
		inputs["tieredCaching"] = args.TieredCaching
		inputs["zoneId"] = args.ZoneId
	}
	s, err := ctx.RegisterResource("cloudflare:index/argo:Argo", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Argo{s: s}, nil
}

// GetArgo gets an existing Argo resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetArgo(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ArgoState, opts ...pulumi.ResourceOpt) (*Argo, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["smartRouting"] = state.SmartRouting
		inputs["tieredCaching"] = state.TieredCaching
		inputs["zoneId"] = state.ZoneId
	}
	s, err := ctx.ReadResource("cloudflare:index/argo:Argo", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Argo{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Argo) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Argo) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Whether smart routing is enabled. Valid values: `on` or `off`. Defaults to `off`.
func (r *Argo) SmartRouting() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["smartRouting"])
}

// Whether tiered caching is enabled. Valid values: `on` or `off`. Defaults to `off`.
func (r *Argo) TieredCaching() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["tieredCaching"])
}

// The DNS zone ID that you wish to manage Argo on.
func (r *Argo) ZoneId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["zoneId"])
}

// Input properties used for looking up and filtering Argo resources.
type ArgoState struct {
	// Whether smart routing is enabled. Valid values: `on` or `off`. Defaults to `off`.
	SmartRouting interface{}
	// Whether tiered caching is enabled. Valid values: `on` or `off`. Defaults to `off`.
	TieredCaching interface{}
	// The DNS zone ID that you wish to manage Argo on.
	ZoneId interface{}
}

// The set of arguments for constructing a Argo resource.
type ArgoArgs struct {
	// Whether smart routing is enabled. Valid values: `on` or `off`. Defaults to `off`.
	SmartRouting interface{}
	// Whether tiered caching is enabled. Valid values: `on` or `off`. Defaults to `off`.
	TieredCaching interface{}
	// The DNS zone ID that you wish to manage Argo on.
	ZoneId interface{}
}
