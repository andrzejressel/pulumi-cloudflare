// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// Provides a Cloudflare Access Policy resource. Access Policies are used
    /// in conjunction with Access Applications to restrict access to a
    /// particular resource.
    /// 
    /// ## Conditions
    /// 
    /// `require`, `exclude` and `include` arguments share the available
    /// conditions which can be applied. The conditions are:
    /// 
    /// * `ip` - (Optional) A list of IP addresses or ranges. Example:
    ///   `ip = ["1.2.3.4", "10.0.0.0/2"]`
    /// * `email` - (Optional) A list of email addresses. Example:
    ///   `email = ["test@example.com"]`
    /// * `email_domain` - (Optional) A list of email domains. Example:
    ///   `email_domain = ["example.com"]`
    /// * `everyone` - (Optional) Boolean indicating permitting access for all
    ///   requests. Example: `everyone = true`
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-cloudflare/blob/master/website/docs/r/access_policy.html.markdown.
    /// </summary>
    public partial class AccessPolicy : Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the application the policy is
        /// associated with.
        /// </summary>
        [Output("applicationId")]
        public Output<string> ApplicationId { get; private set; } = null!;

        /// <summary>
        /// Defines the action Access will take if the policy matches the user.
        /// Allowed values: `allow`, `deny`, `bypass`
        /// </summary>
        [Output("decision")]
        public Output<string> Decision { get; private set; } = null!;

        /// <summary>
        /// A series of access conditions, see below for
        /// full list.
        /// </summary>
        [Output("excludes")]
        public Output<ImmutableArray<Outputs.AccessPolicyExcludes>> Excludes { get; private set; } = null!;

        /// <summary>
        /// A series of access conditions, see below for
        /// full list.
        /// </summary>
        [Output("includes")]
        public Output<ImmutableArray<Outputs.AccessPolicyIncludes>> Includes { get; private set; } = null!;

        /// <summary>
        /// Friendly name of the Access Application.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The unique precedence for policies on a single application. Integer.
        /// </summary>
        [Output("precedence")]
        public Output<int?> Precedence { get; private set; } = null!;

        /// <summary>
        /// A series of access conditions, see below for
        /// full list.
        /// </summary>
        [Output("requires")]
        public Output<ImmutableArray<Outputs.AccessPolicyRequires>> Requires { get; private set; } = null!;

        /// <summary>
        /// The DNS zone to which the access rule should be
        /// added.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a AccessPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AccessPolicy(string name, AccessPolicyArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/accessPolicy:AccessPolicy", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private AccessPolicy(string name, Input<string> id, AccessPolicyState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/accessPolicy:AccessPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AccessPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AccessPolicy Get(string name, Input<string> id, AccessPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new AccessPolicy(name, id, state, options);
        }
    }

    public sealed class AccessPolicyArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the application the policy is
        /// associated with.
        /// </summary>
        [Input("applicationId", required: true)]
        public Input<string> ApplicationId { get; set; } = null!;

        /// <summary>
        /// Defines the action Access will take if the policy matches the user.
        /// Allowed values: `allow`, `deny`, `bypass`
        /// </summary>
        [Input("decision", required: true)]
        public Input<string> Decision { get; set; } = null!;

        [Input("excludes")]
        private InputList<Inputs.AccessPolicyExcludesArgs>? _excludes;

        /// <summary>
        /// A series of access conditions, see below for
        /// full list.
        /// </summary>
        public InputList<Inputs.AccessPolicyExcludesArgs> Excludes
        {
            get => _excludes ?? (_excludes = new InputList<Inputs.AccessPolicyExcludesArgs>());
            set => _excludes = value;
        }

        [Input("includes", required: true)]
        private InputList<Inputs.AccessPolicyIncludesArgs>? _includes;

        /// <summary>
        /// A series of access conditions, see below for
        /// full list.
        /// </summary>
        public InputList<Inputs.AccessPolicyIncludesArgs> Includes
        {
            get => _includes ?? (_includes = new InputList<Inputs.AccessPolicyIncludesArgs>());
            set => _includes = value;
        }

        /// <summary>
        /// Friendly name of the Access Application.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The unique precedence for policies on a single application. Integer.
        /// </summary>
        [Input("precedence")]
        public Input<int>? Precedence { get; set; }

        [Input("requires")]
        private InputList<Inputs.AccessPolicyRequiresArgs>? _requires;

        /// <summary>
        /// A series of access conditions, see below for
        /// full list.
        /// </summary>
        public InputList<Inputs.AccessPolicyRequiresArgs> Requires
        {
            get => _requires ?? (_requires = new InputList<Inputs.AccessPolicyRequiresArgs>());
            set => _requires = value;
        }

        /// <summary>
        /// The DNS zone to which the access rule should be
        /// added.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public AccessPolicyArgs()
        {
        }
    }

    public sealed class AccessPolicyState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the application the policy is
        /// associated with.
        /// </summary>
        [Input("applicationId")]
        public Input<string>? ApplicationId { get; set; }

        /// <summary>
        /// Defines the action Access will take if the policy matches the user.
        /// Allowed values: `allow`, `deny`, `bypass`
        /// </summary>
        [Input("decision")]
        public Input<string>? Decision { get; set; }

        [Input("excludes")]
        private InputList<Inputs.AccessPolicyExcludesGetArgs>? _excludes;

        /// <summary>
        /// A series of access conditions, see below for
        /// full list.
        /// </summary>
        public InputList<Inputs.AccessPolicyExcludesGetArgs> Excludes
        {
            get => _excludes ?? (_excludes = new InputList<Inputs.AccessPolicyExcludesGetArgs>());
            set => _excludes = value;
        }

        [Input("includes")]
        private InputList<Inputs.AccessPolicyIncludesGetArgs>? _includes;

        /// <summary>
        /// A series of access conditions, see below for
        /// full list.
        /// </summary>
        public InputList<Inputs.AccessPolicyIncludesGetArgs> Includes
        {
            get => _includes ?? (_includes = new InputList<Inputs.AccessPolicyIncludesGetArgs>());
            set => _includes = value;
        }

        /// <summary>
        /// Friendly name of the Access Application.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The unique precedence for policies on a single application. Integer.
        /// </summary>
        [Input("precedence")]
        public Input<int>? Precedence { get; set; }

        [Input("requires")]
        private InputList<Inputs.AccessPolicyRequiresGetArgs>? _requires;

        /// <summary>
        /// A series of access conditions, see below for
        /// full list.
        /// </summary>
        public InputList<Inputs.AccessPolicyRequiresGetArgs> Requires
        {
            get => _requires ?? (_requires = new InputList<Inputs.AccessPolicyRequiresGetArgs>());
            set => _requires = value;
        }

        /// <summary>
        /// The DNS zone to which the access rule should be
        /// added.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public AccessPolicyState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class AccessPolicyExcludesArgs : Pulumi.ResourceArgs
    {
        [Input("emails")]
        private InputList<string>? _emails;
        public InputList<string> Emails
        {
            get => _emails ?? (_emails = new InputList<string>());
            set => _emails = value;
        }

        [Input("emailDomains")]
        private InputList<string>? _emailDomains;
        public InputList<string> EmailDomains
        {
            get => _emailDomains ?? (_emailDomains = new InputList<string>());
            set => _emailDomains = value;
        }

        [Input("everyone")]
        public Input<bool>? Everyone { get; set; }

        [Input("ips")]
        private InputList<string>? _ips;
        public InputList<string> Ips
        {
            get => _ips ?? (_ips = new InputList<string>());
            set => _ips = value;
        }

        public AccessPolicyExcludesArgs()
        {
        }
    }

    public sealed class AccessPolicyExcludesGetArgs : Pulumi.ResourceArgs
    {
        [Input("emails")]
        private InputList<string>? _emails;
        public InputList<string> Emails
        {
            get => _emails ?? (_emails = new InputList<string>());
            set => _emails = value;
        }

        [Input("emailDomains")]
        private InputList<string>? _emailDomains;
        public InputList<string> EmailDomains
        {
            get => _emailDomains ?? (_emailDomains = new InputList<string>());
            set => _emailDomains = value;
        }

        [Input("everyone")]
        public Input<bool>? Everyone { get; set; }

        [Input("ips")]
        private InputList<string>? _ips;
        public InputList<string> Ips
        {
            get => _ips ?? (_ips = new InputList<string>());
            set => _ips = value;
        }

        public AccessPolicyExcludesGetArgs()
        {
        }
    }

    public sealed class AccessPolicyIncludesArgs : Pulumi.ResourceArgs
    {
        [Input("emails")]
        private InputList<string>? _emails;
        public InputList<string> Emails
        {
            get => _emails ?? (_emails = new InputList<string>());
            set => _emails = value;
        }

        [Input("emailDomains")]
        private InputList<string>? _emailDomains;
        public InputList<string> EmailDomains
        {
            get => _emailDomains ?? (_emailDomains = new InputList<string>());
            set => _emailDomains = value;
        }

        [Input("everyone")]
        public Input<bool>? Everyone { get; set; }

        [Input("ips")]
        private InputList<string>? _ips;
        public InputList<string> Ips
        {
            get => _ips ?? (_ips = new InputList<string>());
            set => _ips = value;
        }

        public AccessPolicyIncludesArgs()
        {
        }
    }

    public sealed class AccessPolicyIncludesGetArgs : Pulumi.ResourceArgs
    {
        [Input("emails")]
        private InputList<string>? _emails;
        public InputList<string> Emails
        {
            get => _emails ?? (_emails = new InputList<string>());
            set => _emails = value;
        }

        [Input("emailDomains")]
        private InputList<string>? _emailDomains;
        public InputList<string> EmailDomains
        {
            get => _emailDomains ?? (_emailDomains = new InputList<string>());
            set => _emailDomains = value;
        }

        [Input("everyone")]
        public Input<bool>? Everyone { get; set; }

        [Input("ips")]
        private InputList<string>? _ips;
        public InputList<string> Ips
        {
            get => _ips ?? (_ips = new InputList<string>());
            set => _ips = value;
        }

        public AccessPolicyIncludesGetArgs()
        {
        }
    }

    public sealed class AccessPolicyRequiresArgs : Pulumi.ResourceArgs
    {
        [Input("emails")]
        private InputList<string>? _emails;
        public InputList<string> Emails
        {
            get => _emails ?? (_emails = new InputList<string>());
            set => _emails = value;
        }

        [Input("emailDomains")]
        private InputList<string>? _emailDomains;
        public InputList<string> EmailDomains
        {
            get => _emailDomains ?? (_emailDomains = new InputList<string>());
            set => _emailDomains = value;
        }

        [Input("everyone")]
        public Input<bool>? Everyone { get; set; }

        [Input("ips")]
        private InputList<string>? _ips;
        public InputList<string> Ips
        {
            get => _ips ?? (_ips = new InputList<string>());
            set => _ips = value;
        }

        public AccessPolicyRequiresArgs()
        {
        }
    }

    public sealed class AccessPolicyRequiresGetArgs : Pulumi.ResourceArgs
    {
        [Input("emails")]
        private InputList<string>? _emails;
        public InputList<string> Emails
        {
            get => _emails ?? (_emails = new InputList<string>());
            set => _emails = value;
        }

        [Input("emailDomains")]
        private InputList<string>? _emailDomains;
        public InputList<string> EmailDomains
        {
            get => _emailDomains ?? (_emailDomains = new InputList<string>());
            set => _emailDomains = value;
        }

        [Input("everyone")]
        public Input<bool>? Everyone { get; set; }

        [Input("ips")]
        private InputList<string>? _ips;
        public InputList<string> Ips
        {
            get => _ips ?? (_ips = new InputList<string>());
            set => _ips = value;
        }

        public AccessPolicyRequiresGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class AccessPolicyExcludes
    {
        public readonly ImmutableArray<string> Emails;
        public readonly ImmutableArray<string> EmailDomains;
        public readonly bool? Everyone;
        public readonly ImmutableArray<string> Ips;

        [OutputConstructor]
        private AccessPolicyExcludes(
            ImmutableArray<string> emails,
            ImmutableArray<string> emailDomains,
            bool? everyone,
            ImmutableArray<string> ips)
        {
            Emails = emails;
            EmailDomains = emailDomains;
            Everyone = everyone;
            Ips = ips;
        }
    }

    [OutputType]
    public sealed class AccessPolicyIncludes
    {
        public readonly ImmutableArray<string> Emails;
        public readonly ImmutableArray<string> EmailDomains;
        public readonly bool? Everyone;
        public readonly ImmutableArray<string> Ips;

        [OutputConstructor]
        private AccessPolicyIncludes(
            ImmutableArray<string> emails,
            ImmutableArray<string> emailDomains,
            bool? everyone,
            ImmutableArray<string> ips)
        {
            Emails = emails;
            EmailDomains = emailDomains;
            Everyone = everyone;
            Ips = ips;
        }
    }

    [OutputType]
    public sealed class AccessPolicyRequires
    {
        public readonly ImmutableArray<string> Emails;
        public readonly ImmutableArray<string> EmailDomains;
        public readonly bool? Everyone;
        public readonly ImmutableArray<string> Ips;

        [OutputConstructor]
        private AccessPolicyRequires(
            ImmutableArray<string> emails,
            ImmutableArray<string> emailDomains,
            bool? everyone,
            ImmutableArray<string> ips)
        {
            Emails = emails;
            EmailDomains = emailDomains;
            Everyone = everyone;
            Ips = ips;
        }
    }
    }
}
