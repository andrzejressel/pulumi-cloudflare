// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LoadBalancerRuleOverrideSessionAffinityAttribute {
    /**
     * @return Configures the SameSite attribute on session affinity cookie. Value `Auto` will be translated to `Lax` or `None` depending if Always Use HTTPS is enabled. Note: when using value `None`, then you can not set `secure=&#34;Never&#34;`. Available values: `Auto`, `Lax`, `None`, `Strict`. Defaults to `Auto`.
     * 
     */
    private @Nullable String samesite;
    /**
     * @return Configures the Secure attribute on session affinity cookie. Value `Always` indicates the Secure attribute will be set in the Set-Cookie header, `Never` indicates the Secure attribute will not be set, and `Auto` will set the Secure attribute depending if Always Use HTTPS is enabled. Available values: `Auto`, `Always`, `Never`. Defaults to `Auto`.
     * 
     */
    private @Nullable String secure;
    /**
     * @return Configures the zero-downtime failover between origins within a pool when session affinity is enabled. Value `none` means no failover takes place for sessions pinned to the origin. Value `temporary` means traffic will be sent to another other healthy origin until the originally pinned origin is available; note that this can potentially result in heavy origin flapping. Value `sticky` means the session affinity cookie is updated and subsequent requests are sent to the new origin. This feature is currently incompatible with Argo, Tiered Cache, and Bandwidth Alliance. Available values: `none`, `temporary`, `sticky`. Defaults to `none`.
     * 
     */
    private @Nullable String zeroDowntimeFailover;

    private LoadBalancerRuleOverrideSessionAffinityAttribute() {}
    /**
     * @return Configures the SameSite attribute on session affinity cookie. Value `Auto` will be translated to `Lax` or `None` depending if Always Use HTTPS is enabled. Note: when using value `None`, then you can not set `secure=&#34;Never&#34;`. Available values: `Auto`, `Lax`, `None`, `Strict`. Defaults to `Auto`.
     * 
     */
    public Optional<String> samesite() {
        return Optional.ofNullable(this.samesite);
    }
    /**
     * @return Configures the Secure attribute on session affinity cookie. Value `Always` indicates the Secure attribute will be set in the Set-Cookie header, `Never` indicates the Secure attribute will not be set, and `Auto` will set the Secure attribute depending if Always Use HTTPS is enabled. Available values: `Auto`, `Always`, `Never`. Defaults to `Auto`.
     * 
     */
    public Optional<String> secure() {
        return Optional.ofNullable(this.secure);
    }
    /**
     * @return Configures the zero-downtime failover between origins within a pool when session affinity is enabled. Value `none` means no failover takes place for sessions pinned to the origin. Value `temporary` means traffic will be sent to another other healthy origin until the originally pinned origin is available; note that this can potentially result in heavy origin flapping. Value `sticky` means the session affinity cookie is updated and subsequent requests are sent to the new origin. This feature is currently incompatible with Argo, Tiered Cache, and Bandwidth Alliance. Available values: `none`, `temporary`, `sticky`. Defaults to `none`.
     * 
     */
    public Optional<String> zeroDowntimeFailover() {
        return Optional.ofNullable(this.zeroDowntimeFailover);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LoadBalancerRuleOverrideSessionAffinityAttribute defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String samesite;
        private @Nullable String secure;
        private @Nullable String zeroDowntimeFailover;
        public Builder() {}
        public Builder(LoadBalancerRuleOverrideSessionAffinityAttribute defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.samesite = defaults.samesite;
    	      this.secure = defaults.secure;
    	      this.zeroDowntimeFailover = defaults.zeroDowntimeFailover;
        }

        @CustomType.Setter
        public Builder samesite(@Nullable String samesite) {
            this.samesite = samesite;
            return this;
        }
        @CustomType.Setter
        public Builder secure(@Nullable String secure) {
            this.secure = secure;
            return this;
        }
        @CustomType.Setter
        public Builder zeroDowntimeFailover(@Nullable String zeroDowntimeFailover) {
            this.zeroDowntimeFailover = zeroDowntimeFailover;
            return this;
        }
        public LoadBalancerRuleOverrideSessionAffinityAttribute build() {
            final var o = new LoadBalancerRuleOverrideSessionAffinityAttribute();
            o.samesite = samesite;
            o.secure = secure;
            o.zeroDowntimeFailover = zeroDowntimeFailover;
            return o;
        }
    }
}
