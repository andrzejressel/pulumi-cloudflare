// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadBalancerRuleOverrideSessionAffinityAttributeArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerRuleOverrideSessionAffinityAttributeArgs Empty = new LoadBalancerRuleOverrideSessionAffinityAttributeArgs();

    /**
     * Configures the SameSite attribute on session affinity cookie. Value `Auto` will be translated to `Lax` or `None` depending if Always Use HTTPS is enabled. Note: when using value `None`, then you can not set `secure=&#34;Never&#34;`. Available values: `Auto`, `Lax`, `None`, `Strict`. Defaults to `Auto`.
     * 
     */
    @Import(name="samesite")
    private @Nullable Output<String> samesite;

    /**
     * @return Configures the SameSite attribute on session affinity cookie. Value `Auto` will be translated to `Lax` or `None` depending if Always Use HTTPS is enabled. Note: when using value `None`, then you can not set `secure=&#34;Never&#34;`. Available values: `Auto`, `Lax`, `None`, `Strict`. Defaults to `Auto`.
     * 
     */
    public Optional<Output<String>> samesite() {
        return Optional.ofNullable(this.samesite);
    }

    /**
     * Configures the Secure attribute on session affinity cookie. Value `Always` indicates the Secure attribute will be set in the Set-Cookie header, `Never` indicates the Secure attribute will not be set, and `Auto` will set the Secure attribute depending if Always Use HTTPS is enabled. Available values: `Auto`, `Always`, `Never`. Defaults to `Auto`.
     * 
     */
    @Import(name="secure")
    private @Nullable Output<String> secure;

    /**
     * @return Configures the Secure attribute on session affinity cookie. Value `Always` indicates the Secure attribute will be set in the Set-Cookie header, `Never` indicates the Secure attribute will not be set, and `Auto` will set the Secure attribute depending if Always Use HTTPS is enabled. Available values: `Auto`, `Always`, `Never`. Defaults to `Auto`.
     * 
     */
    public Optional<Output<String>> secure() {
        return Optional.ofNullable(this.secure);
    }

    /**
     * Configures the zero-downtime failover between origins within a pool when session affinity is enabled. Value `none` means no failover takes place for sessions pinned to the origin. Value `temporary` means traffic will be sent to another other healthy origin until the originally pinned origin is available; note that this can potentially result in heavy origin flapping. Value `sticky` means the session affinity cookie is updated and subsequent requests are sent to the new origin. This feature is currently incompatible with Argo, Tiered Cache, and Bandwidth Alliance. Available values: `none`, `temporary`, `sticky`. Defaults to `none`.
     * 
     */
    @Import(name="zeroDowntimeFailover")
    private @Nullable Output<String> zeroDowntimeFailover;

    /**
     * @return Configures the zero-downtime failover between origins within a pool when session affinity is enabled. Value `none` means no failover takes place for sessions pinned to the origin. Value `temporary` means traffic will be sent to another other healthy origin until the originally pinned origin is available; note that this can potentially result in heavy origin flapping. Value `sticky` means the session affinity cookie is updated and subsequent requests are sent to the new origin. This feature is currently incompatible with Argo, Tiered Cache, and Bandwidth Alliance. Available values: `none`, `temporary`, `sticky`. Defaults to `none`.
     * 
     */
    public Optional<Output<String>> zeroDowntimeFailover() {
        return Optional.ofNullable(this.zeroDowntimeFailover);
    }

    private LoadBalancerRuleOverrideSessionAffinityAttributeArgs() {}

    private LoadBalancerRuleOverrideSessionAffinityAttributeArgs(LoadBalancerRuleOverrideSessionAffinityAttributeArgs $) {
        this.samesite = $.samesite;
        this.secure = $.secure;
        this.zeroDowntimeFailover = $.zeroDowntimeFailover;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerRuleOverrideSessionAffinityAttributeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerRuleOverrideSessionAffinityAttributeArgs $;

        public Builder() {
            $ = new LoadBalancerRuleOverrideSessionAffinityAttributeArgs();
        }

        public Builder(LoadBalancerRuleOverrideSessionAffinityAttributeArgs defaults) {
            $ = new LoadBalancerRuleOverrideSessionAffinityAttributeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param samesite Configures the SameSite attribute on session affinity cookie. Value `Auto` will be translated to `Lax` or `None` depending if Always Use HTTPS is enabled. Note: when using value `None`, then you can not set `secure=&#34;Never&#34;`. Available values: `Auto`, `Lax`, `None`, `Strict`. Defaults to `Auto`.
         * 
         * @return builder
         * 
         */
        public Builder samesite(@Nullable Output<String> samesite) {
            $.samesite = samesite;
            return this;
        }

        /**
         * @param samesite Configures the SameSite attribute on session affinity cookie. Value `Auto` will be translated to `Lax` or `None` depending if Always Use HTTPS is enabled. Note: when using value `None`, then you can not set `secure=&#34;Never&#34;`. Available values: `Auto`, `Lax`, `None`, `Strict`. Defaults to `Auto`.
         * 
         * @return builder
         * 
         */
        public Builder samesite(String samesite) {
            return samesite(Output.of(samesite));
        }

        /**
         * @param secure Configures the Secure attribute on session affinity cookie. Value `Always` indicates the Secure attribute will be set in the Set-Cookie header, `Never` indicates the Secure attribute will not be set, and `Auto` will set the Secure attribute depending if Always Use HTTPS is enabled. Available values: `Auto`, `Always`, `Never`. Defaults to `Auto`.
         * 
         * @return builder
         * 
         */
        public Builder secure(@Nullable Output<String> secure) {
            $.secure = secure;
            return this;
        }

        /**
         * @param secure Configures the Secure attribute on session affinity cookie. Value `Always` indicates the Secure attribute will be set in the Set-Cookie header, `Never` indicates the Secure attribute will not be set, and `Auto` will set the Secure attribute depending if Always Use HTTPS is enabled. Available values: `Auto`, `Always`, `Never`. Defaults to `Auto`.
         * 
         * @return builder
         * 
         */
        public Builder secure(String secure) {
            return secure(Output.of(secure));
        }

        /**
         * @param zeroDowntimeFailover Configures the zero-downtime failover between origins within a pool when session affinity is enabled. Value `none` means no failover takes place for sessions pinned to the origin. Value `temporary` means traffic will be sent to another other healthy origin until the originally pinned origin is available; note that this can potentially result in heavy origin flapping. Value `sticky` means the session affinity cookie is updated and subsequent requests are sent to the new origin. This feature is currently incompatible with Argo, Tiered Cache, and Bandwidth Alliance. Available values: `none`, `temporary`, `sticky`. Defaults to `none`.
         * 
         * @return builder
         * 
         */
        public Builder zeroDowntimeFailover(@Nullable Output<String> zeroDowntimeFailover) {
            $.zeroDowntimeFailover = zeroDowntimeFailover;
            return this;
        }

        /**
         * @param zeroDowntimeFailover Configures the zero-downtime failover between origins within a pool when session affinity is enabled. Value `none` means no failover takes place for sessions pinned to the origin. Value `temporary` means traffic will be sent to another other healthy origin until the originally pinned origin is available; note that this can potentially result in heavy origin flapping. Value `sticky` means the session affinity cookie is updated and subsequent requests are sent to the new origin. This feature is currently incompatible with Argo, Tiered Cache, and Bandwidth Alliance. Available values: `none`, `temporary`, `sticky`. Defaults to `none`.
         * 
         * @return builder
         * 
         */
        public Builder zeroDowntimeFailover(String zeroDowntimeFailover) {
            return zeroDowntimeFailover(Output.of(zeroDowntimeFailover));
        }

        public LoadBalancerRuleOverrideSessionAffinityAttributeArgs build() {
            return $;
        }
    }

}
